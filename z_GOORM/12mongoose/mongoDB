데이터베이스의 한 종류 : mongoDB
nodes.js , mongoose

mongoose, mongoDB라는 NoSQL 데이터베이스를 지원하는 노드의 확장모듈
mongoose는 mongoDB의 ODM

ODM = Object Document Mapping
문서를 DB에서 조회할 때 자바스크립트 객체로 바꿔주는 역할.


기존의 데이터베이스 - > 대부분 관계형 모델에 기반
대부분 SQL이라는 질의문에 의해 데이터베이스를 수정, 갱신, 저장, 검색

최근에는 관계형 데이터베이스 모델과는 다른 데이터베이스 관리 시스템 
-> NoSQL(Not Only SQL)에 대한 관심이 증가

빅데이터를 다를 때 RDBMS로만 트래픽을 감당하기 어려워져 이를 해결하기 위해 탄생한 것이 NoSQL
관계형 데이터베이스를 사용하지않고 SQL을 사용하지 않는 그 이외의 모든 데이터베이스 시스템 또는 
데이터 스토어를 일컬어 NoSQL이라고 칭한다.
가장 큰 특징은 확장성과 기용성, 높은 성능, 그리고 다양한 데이터 형태를 수용할 수 있다는 것

NoSQL은 무한에 가까운 확장성을 제공하는데, 
            이를 위해 NoSQL 데이터베이스는 단순한 키와 값의 쌍으로 이루어져있다.
인덱스와 데이터는 분리되어 별도로 운영되며 고정된 스키마도 없다.
RDBMS와는 다르게 테이블 스키마가 유동적이라 다양한 형태들의 데이터를 유연하게 처리가능
대신 분산형 구조 - > 분산 시스템의 특징을 반영
NoSQL의 대표적인 제품은 구글의 빅테이블, 그리고 mongoDB
Cassandra, HBase, Redis, Coherence, CouchDB, Couchbase, Riak

mongoDB는 문서지향 (Document-Oriented) 저장소를 제공하는 NoSQL 데이터베이스 시스템으로,
현존 NoSQL 데잍터베이스 중 인지도 1위를 유지
mongoDB 에서는 데이터가 Document로 불리며, 이데이터의 집합을 Collection(RDMS에서는 Table) 이라함
스키마 제약없이 자유롭고 BSON(Binary JSON) 형태로 각 문서가 저장되며 배별이나 날짜 등 기존
RDMS에서 지원하지 않던 형태로도 저장할 수 있기 때문에 JOIN이 필요없이 한 문서에서 이해하기 쉬운
형태 그대로 정보를 저장할 수 있다는 것이 특징.

특히 mongoDB는 문서지향 데이터베이스로,
        이것은 객체지향 프로그래밍과 잘 맞고 JSON을 사용할 때 아주 유용하다
Node.js와 호환이 매우 좋기 때문에, Node.js에서 가장 많이 사용되는 데이터베이스입니다.
물론 mysql 같은 관계형 데이터베이스 사용도 가능합니다.

문서지향 데이터베이스에서는 행 개념 대신 보다 유연한 모델인 문서를 이용
내장문서와 배열 따위의 표현이 가능해서 복잡한 객ㅊ체의 계층 관계를 하나의 레코드로 표현할 수 있다.
이러한 문서지향 데이터베이스로는 mongoDB이외에도 10gen, Couchbse, CounhDB 등이 있습니다.

실제로 mongoDB를 대규모로 사용하는 곳 중 유명한 사이트는 여행 예약 사이트Expedia, 위치기반 SNS Foursquare


mongoDB 특징
Join 이없으므로 Join이 필요없도록 데이터 구조화가 필요
다양한 종류의 쿼리문을 지원(필터링, 수집, 정렬, 정규표현식 등)
관리의 편의성
스키마 없는(Schemaless) 데이터베이스를 이용한 신속 개발. 필드를 추가하거나 제거하는 것이 매우 쉬워짐
쉬운 수평 확장성
인덱싱 제공

SQL과의 비교
일반적으로 많이 사용되는 것은 SQL입니다. 따라서 NOSQL인 mongoDB의 질의문은 조금 어색할 수 있다.
mongoDB 공식 사이트에서 SQL문과 비교해놓은 것이 있는 데 한번 읽어보면서 익숙해지도록 노력하자
mysql              MongoDB
database         database
table	         collection
index            index
row	JSON         document
column	         JSON field
join	         embedding and linking
primary key 	_id field
group by   	     aggregation

CREATE TABLE USERS(a Number, b Number)	        db.createCollection("mycoll")
INSERT INTO USERS VALUES(3, 5)	                db.users.insert({a:3, b:5})
SELECT * FROM users	                            db.users.find()
SELECT a,b FROM users WHERE age=20      	    db.users.find({age:20}, {a:1, b:1})
SELECT *FROM users WHERE age=20 ORDER BY name	db.users.find({age:20}).sort({name:1})
mongoose 모듈이란?
mongoose는 mongoDB라는 NoSQL데이터베이스를 지원하는 노드의 확장모듈이다.
기능이 추가되어 다양한 기능들로 편의성을 높였으나, 속도는 조금 떨어진다.
그런데도 mongoose가 가장 많이 쓰이는 이유중 하나인 것은 오프젝트(Object)들을 만들고,
오브젝트와 data를 묶어서 사용하는 ODM(Object Data Mapping)의 특성 때문입니다.

mongoose는 데이터를 만들고 관리하기 위해서 스키마를 만들고, 그 스키마로 모델을 만듭니다.
NoSQL인 mongoDB는 RDBMS와 달리 column과 row로 구성되어야만하는 일반적인 데이터베이스 
스키마의 제한을 벗어났다.
mongoose는 그러한 mongoDB의 구성 철학에 따른 장점을 그대로 가져왔다.
스키마와 모델을 만드는 것을 통하여 data를 불러온 후에 그 데이터를 객체화시켜 빠르게 수정함으로써
데이터에 접근할 수 있게 해줍니다.
분명하게 모델링된 문서(Document)들이 모여있는 Collection을 관리하는 것이 수월해진다는 장점 또한 가지고 있다.


주요 메소드 살펴보기
mongoDB 연결하기
우선 mongoDB에 연결해야합니다. 먼저 require() 함수를 통해 확장 모듈을 mongoose 객체에 로드하여 만든다.
mongoose 객체에는 기본적으로 데이터베이스에 연결하는 connect()메소드가 제공된다.
이 메소드는 mongodb://로 시작하는 URI 값이나 host, database, port, options를 인자로 받습니다.

var mongoose = require('mongoose');
mongoose.connect('mongodb://localhost/goormdb')

connection 인스턴스가 생성되며 연결되는 순간에는 open 이벤트가 발생한다.
이때 인스턴스는 mongoose.connection 이다.
goormdb라는 데이터베이스가 없다면 mongoDB는 이를 자동 생성한다.

위 방법은 단 하나의 데이터베이스에 연결할 때에만 유효하다. 만약 데이터베이스도 함꼐
사용하고자 mongoose.connect()를 다시 호출하면 mongoose.connection 인스턴스는
새로운 데이터베이스에 연결된 것으로 변경되게 된다.

mongoose 5 version 부터는 업데이트되어 useNewUrlParser 옵션을 사용해주지 않으면 경고 메세지가 출력된다.
mongoose.connect('mongodb://localhost/goormdb', {UseNewurlParse});

var connection1 = mongoose.createConnection('mongodb://localhost/mydb1');
var connection2 = mongoose.createConnection('mongodb://localhost/mydb2');
하나의 애플리케이션에서 여러 개의 데이터베이스로 연결할 수 있다.

모델정의하기
mongoose의 모델은 mongoDB에서의 데이터를 저장하는 기본 단위인 도큐먼트의 형태를 의미한다.
이것은 mongoose에서 제공하는 Schema라는 인터페이스를 통해 생성할 수 있다.
모델을 생성하기 위해 다음과 같은 스키마가 필요하다.
var Schema = mongoose.Schema, ObjectId = Schema.ObjectId;
var ArticleSchema = new Schema({
    author: ObjectId,
    title : String,
    body: String,
    date: Date
});
이렇게 정의한 스키마를 이용해 모델을 정의하려면
mongoose.model('ModelName', Schema)를 이용해야 한다. 다음과 같은 함수를 이용해
모델에 접근할 수 있다.
var ArticleModel = mongoose.model('Article', ArticleScheme);
이 코드는 앞서 생성한 ArticleSchema를 이용하여 Article 이라는 모델을 생성하는 코드이다

모델 사용하기
모델을 사용하려면 생성한 모델의 인스턴스를 또 한 번 생성해야한다. 생성한 인스턴스를
이용하여 우리가 원하는 실제 데이터베이스 작업을 수행할 수 있다.

var instance = new ArticleModel();
instance.title = 'hello';
instance.save(function(err){
    // save 실행 후 콜백 함수 내용
});
instance.find({}, function(err, docs){
    // find 실행 후 콜백 함수 내용
});

도큐먼트, 즉 우리가 원하는 데이터는 find(),findeOne(),findById() 메소드를 통해
검색할 수 있다. 이런 메소드들은 Model 인스턴스에서 실행된다. 이것들은 mongoDB의
검색 메소드와 유사하다. 다음의 find()메소드의 인자들은 각각 검색 질의문, 
출력하고자 하는 필드, 옵션, 그리고 콜백함수이다.

Model.find(query, field, options, callback);

다음 예제는 some.value=5 인 Document를 검색. 이때 콜백 함수로 넘어오는 인자 중
docs는 배열로서 검색된 모든 돋큐먼트를 담고 있다.

Model.find({'some.value' : 5}, function(err,docs){
    콜백함수 내용
});

다음은 특정 필드 값을 얻으려고 검색한 모든 도큐먼트에서 그것들이 생성될 때
디폴트로 만들어진 필드 값 (ObjectID)을 출력하는 예제

Model.find({}, ['first','last'], function(err, docs){
    콜백함수의 내용
});

Model.findOne() 메소드는 Model.find()와 거의 같지만, 오직 하나의 도큐먼트만이
두 번째 인자로 넘긴 콜백 함수의 doc인자로 전달된다. 이때 이 doc은 단 하나의 객체이다.
다음 예제는 age가 5인 도큐먼트를 하나만 검색한다.

Model.findOne({age: 5}, function(err, doc){
            // 콜백 함수의 내용
});

 마지막으로 Model.findById() 메소드는 findOne() 메소드와 마찬가지로 단 하나의 
 도큐먼트만 반환하지만 _id 키 값을 이용하여 검색한다.

Model.findById(obj._id, function(err, doc) {
            // 콜백 함수의 내용
});

도큐먼트 추가
mongoose에서 새로운 도큐먼트를 저장하는 방법이다. 모델을 생성하면서 tilte과 body
필드의 값을 먼저 채우고 articel.date와 같이 객체의 멤버에 접근하는 방식을 통해 
날짜 값도 부여한다. 이것을 최종적으로 컬렉션에 저장하려면 article.save() 메소드를
호출하면 된다.

var article = new ArticleModel({title:"Title", body : "Contents"});
article.date = new Date();
article.save(function(err){
    if(err){
        return handleError(err);
    }
});

별도의 모델 인스턴스를 생성하지 않고 모델을 이용하여 바로 도큐먼트를 추가하는
방법도 있다. 모델 객체에서 create() 메소드 호출을 통해 바로 데이터를 입력하는
예제코드이다.

Article.Model.create({title: "Title", body: "Contents", date: new Date()}, function(err){
    if(err){
        return handleError(err);
    }
});

도큐먼트 삭제
모델 객체의 remove() 메소드 호출을 통해 특정 조건에 맞는 도큐먼트를 삭제할수있다.
mongoDB 3.2 version 부터는 remove 메소드에서 좀 더 세분화된 deleteOne,
deleteMany가 추가되면서 remove 대신 이 두 메소드를 사용하는 것을 권장합니다.
deleteOne은 매칭되는 첫 번째 도큐먼트만 지우고, 
deleteMany는 매칭되는 모든 도큐먼트를 지운다는 점에서 차이가 있다. 사용 방법은 같다.

ArticleModel.remove({title: "Title"}, function(err){
    if(err){
        return handleError(err);
    }
            // remove() 성공후 수행할 내용
})